{"version":3,"sources":["components/Navbar.js","components/TextArea.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextArea","useState","text","setText","j","i","split","length","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","join","protoTypes","PropTypes","string","isRequired","aboutText","defaultProps","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setmode","setalert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3ccb4513.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              </li> */}\r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n            </div>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n            </form> */}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.protoTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Add a title',\r\n    aboutText: 'About'\r\n}","import React from 'react'\r\nimport { useState } from 'react';\r\n\r\nexport default function TextArea(props) {\r\n    const HandleUpClick = () => {\r\n        // console.log('Clicked')\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Upper Case!\", 'success');\r\n    }\r\n    const HandleLowClick = () => {\r\n        // console.log('Clicked')\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lower Case!\", 'success');\r\n    }\r\n    const HandleClearClick = () => {\r\n        // console.log(\"changed\")\r\n        setText(\"\");\r\n        props.showAlert(\"Text Box Cleared!\", 'success');\r\n    }\r\n    const HandleCopy = () => {\r\n        let text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to Clipboard!\", 'success');\r\n    }\r\n    const HandleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\", 'success');\r\n    }\r\n    const HandleChange = (event) => {\r\n        // console.log(\"changed\")\r\n        setText(event.target.value)\r\n    }\r\n    const [text, setText] = useState('');\r\n\r\n    let j = 0;\r\n    let i = text.split(\" \").length - 1;\r\n    while (i >= 0) {\r\n        if (text.split(\" \")[i] === \"\") j++;\r\n        i = i - 1;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container my-3\" style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={HandleChange} style={{ backgroundColor: props.mode === 'light' ? 'white' : 'darkgrey', color: props.mode === 'light' ? 'black' : 'white' }} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button type=\"button\" onClick={HandleUpClick} className=\"btn btn-primary mx-1\">Convert to Uppercase</button>\r\n                <button type=\"button\" onClick={HandleLowClick} className=\"btn btn-primary mx-1\">Convert to Lowercase</button>\r\n                <button type=\"button\" onClick={HandleClearClick} className=\"btn btn-primary mx-1\">Clear Text</button>\r\n                <button type=\"button\" onClick={HandleCopy} className=\"btn btn-primary mx-1\">Copy Text</button>\r\n                <button type=\"button\" onClick={HandleExtraSpaces} className=\"btn btn-primary mx-1\">Remove Extra Spaces</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                <h2>Text details</h2>\r\n                <p>{text.split(\" \").length - j} words and {text.length} characters</p>\r\n                <p>{0.008 * (text.split(\" \").length - j)} Minutes read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length===0?\"Enter something above to get it's preview here\":text}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar'\nimport TextArea from './components/TextArea'\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState('light')\n  const [alert, setalert] = useState(null)\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\")\n      document.body.style.backgroundColor = 'black'\n      showAlert(\"Dark Mode has been enabled!\", \"success\")\n    }\n    else {\n      setmode(\"light\")\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Light Mode has been enabled!\", \"success\")\n    }\n  }\n  const showAlert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  }\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <TextArea showAlert={showAlert} heading=\"Enter your text below\" mode={mode} />\n        {/* <div className=\"container\">\n          <div className=\"container my-3\">\n            <Routes>\n              <Route path=\"/about\" element={<About mode={mode}/>}/>\n              <Route path=\"/\" element={<TextArea showAlert={showAlert} heading=\"Enter your text below\" mode={mode} />}/>\n            </Routes>\n          </div>\n        </div>\n      </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}